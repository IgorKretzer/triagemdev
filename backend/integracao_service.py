"""
Servi√ßo de Integra√ß√£o com Sistema Existente (IaChamadoN3)
Busca chamados gerados pelo sistema principal para aplicar triagem
Agora usa Firebase diretamente para melhor performance
"""

import httpx
import os
from typing import Optional, Dict, Any, List
import logging
from firebase_db import FirebaseDatabase

class IntegracaoService:
    def __init__(self):
        # URL do sistema principal (IaChamadoN3) - fallback para HTTP
        self.sistema_principal_url = os.getenv(
            "SISTEMA_PRINCIPAL_URL", 
            "http://localhost:8000"  # URL local do sistema existente
        )
        self.timeout = 30
        
        # Firebase Database para acesso direto
        self.firebase_db = FirebaseDatabase()
        
        # Configura√ß√£o de log
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
    
    async def buscar_chamado_por_ticket(self, ticket_numero: str) -> Optional[Dict[str, Any]]:
        """
        Busca o chamado gerado pelo sistema principal usando o n√∫mero do ticket
        Primeiro tenta Firebase, depois fallback para HTTP
        
        Args:
            ticket_numero: N√∫mero do ticket (ex: "12345")
            
        Returns:
            Dicion√°rio com dados do chamado ou None se n√£o encontrado
        """
        try:
            self.logger.info(f"üîç Buscando chamado para ticket: {ticket_numero}")
            
            # 1. Tenta buscar diretamente do Firebase (mais r√°pido)
            if self.firebase_db.is_configured():
                self.logger.info("üî• Buscando no Firebase...")
                dados_firebase = self.firebase_db.buscar_analise_por_ticket(ticket_numero)
                
                if dados_firebase:
                    self.logger.info(f"‚úÖ Chamado encontrado no Firebase para ticket {ticket_numero}")
                    return {
                        'ticket_numero': dados_firebase.get('ticket_numero'),
                        'chamado_gerado': dados_firebase.get('chamado_gerado'),
                        'modulo_identificado': dados_firebase.get('modulo_identificado'),
                        'tipo_identificado': dados_firebase.get('tipo_identificado'),
                        'data_analise': dados_firebase.get('data_analise'),
                        'usuario_nome': dados_firebase.get('usuario_nome'),
                        'cliente_nome': dados_firebase.get('cliente_nome'),
                        'titulo_ticket': dados_firebase.get('titulo_ticket'),
                        'analise_id': dados_firebase.get('id')
                    }
                else:
                    self.logger.info("‚ö†Ô∏è Chamado n√£o encontrado no Firebase, tentando HTTP...")
            
            # 2. Fallback para HTTP (sistema principal)
            self.logger.info("üåê Buscando via HTTP...")
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                # Tenta buscar no endpoint de estat√≠sticas recentes
                response = await client.get(f"{self.sistema_principal_url}/api/estatisticas/recentes")
                
                if response.status_code == 200:
                    dados = response.json()
                    analises = dados.get('analises', [])
                    
                    # Procura pela an√°lise do ticket espec√≠fico
                    for analise in analises:
                        if analise.get('ticket_numero') == str(ticket_numero):
                            self.logger.info(f"‚úÖ Chamado encontrado via HTTP para ticket {ticket_numero}")
                            return {
                                'ticket_numero': analise.get('ticket_numero'),
                                'chamado_gerado': analise.get('chamado_gerado'),
                                'modulo_identificado': analise.get('modulo_identificado'),
                                'tipo_identificado': analise.get('tipo_identificado'),
                                'data_analise': analise.get('data_analise'),
                                'usuario_nome': analise.get('usuario_nome'),
                                'cliente_nome': analise.get('cliente_nome'),
                                'titulo_ticket': analise.get('titulo_ticket'),
                                'analise_id': analise.get('id')
                            }
                
                self.logger.warning(f"‚ö†Ô∏è Chamado n√£o encontrado para ticket: {ticket_numero}")
                return None
                
        except httpx.ConnectError:
            self.logger.error(f"‚ùå N√£o foi poss√≠vel conectar com sistema principal: {self.sistema_principal_url}")
            return None
        except httpx.TimeoutException:
            self.logger.error(f"‚ùå Timeout ao buscar chamado para ticket: {ticket_numero}")
            return None
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao buscar chamado: {str(e)}")
            return None
    
    async def verificar_conexao_sistema_principal(self) -> bool:
        """
        Verifica se o sistema principal est√° acess√≠vel
        
        Returns:
            True se acess√≠vel, False caso contr√°rio
        """
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                response = await client.get(f"{self.sistema_principal_url}/health")
                return response.status_code == 200
        except:
            return False
    
    async def obter_analises_recentes(self, limite: int = 10) -> list:
        """
        Obt√©m an√°lises recentes do sistema principal
        Primeiro tenta Firebase, depois fallback para HTTP
        
        Args:
            limite: N√∫mero m√°ximo de an√°lises a retornar
            
        Returns:
            Lista de an√°lises recentes
        """
        try:
            self.logger.info(f"üìä Obtendo {limite} an√°lises recentes do sistema principal...")
            
            # 1. Tenta buscar diretamente do Firebase (mais r√°pido)
            if self.firebase_db.is_configured():
                self.logger.info("üî• Buscando an√°lises recentes no Firebase...")
                analises_firebase = self.firebase_db.get_analises_recentes_sistema_principal(limite)
                
                if analises_firebase:
                    self.logger.info(f"‚úÖ {len(analises_firebase)} an√°lises obtidas do Firebase")
                    return analises_firebase
                else:
                    self.logger.info("‚ö†Ô∏è Nenhuma an√°lise encontrada no Firebase, tentando HTTP...")
            
            # 2. Fallback para HTTP (sistema principal)
            self.logger.info("üåê Buscando an√°lises via HTTP...")
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.get(f"{self.sistema_principal_url}/api/estatisticas/recentes")
                
                if response.status_code == 200:
                    dados = response.json()
                    analises = dados.get('analises', [])
                    analises_limitadas = analises[:limite]
                    self.logger.info(f"‚úÖ {len(analises_limitadas)} an√°lises obtidas via HTTP")
                    return analises_limitadas
                
                return []
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao obter an√°lises recentes: {str(e)}")
            return []
    
    async def buscar_por_ticket_alternativo(self, ticket_numero: str) -> Optional[Dict[str, Any]]:
        """
        M√©todo alternativo para buscar chamado por ticket
        Tenta diferentes estrat√©gias de busca
        
        Args:
            ticket_numero: N√∫mero do ticket
            
        Returns:
            Dados do chamado ou None
        """
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                # Estrat√©gia 1: Buscar por per√≠odo (√∫ltimos 30 dias)
                # Isso seria implementado se houvesse um endpoint espec√≠fico
                
                # Estrat√©gia 2: Buscar em cache local se dispon√≠vel
                # (implementar cache local se necess√°rio)
                
                # Estrat√©gia 3: Buscar diretamente no banco se tiver acesso
                # (implementar conex√£o direta ao banco se necess√°rio)
                
                self.logger.info(f"üîç Tentativa alternativa de busca para ticket: {ticket_numero}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro na busca alternativa: {str(e)}")
            return None

# Inst√¢ncia global do servi√ßo
integracao_service = IntegracaoService()
