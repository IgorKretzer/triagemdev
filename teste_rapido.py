#!/usr/bin/env python3
"""
Teste R√°pido do Sistema de Triagem
Executa um teste b√°sico para verificar se tudo est√° funcionando
"""

import asyncio
import sys
import os
from datetime import datetime

def print_header():
    print("üéØ SISTEMA DE TRIAGEM INTELIGENTE - SPONTE")
    print("=" * 60)
    print(f"‚è∞ Teste iniciado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()

def print_step(step, description):
    print(f"üìã PASSO {step}: {description}")
    print("-" * 40)

async def test_imports():
    """Testa se todas as importa√ß√µes funcionam"""
    print_step(1, "Testando Importa√ß√µes")
    
    try:
        from triagem_service import TriagemService
        from schemas_triagem import TriagemRequest, TriagemResponse
        print("‚úÖ Importa√ß√µes b√°sicas: OK")
        
        # Testa importa√ß√£o opcional do Gemini
        try:
            import google.generativeai as genai
            print("‚úÖ Google Generative AI: OK")
        except ImportError:
            print("‚ö†Ô∏è  Google Generative AI: N√£o instalado (modo MOCK)")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro nas importa√ß√µes: {e}")
        return False

async def test_base_conhecimento():
    """Testa se a base de conhecimento est√° carregada"""
    print_step(2, "Testando Base de Conhecimento")
    
    try:
        import json
        
        if not os.path.exists('base_conhecimento_triagem.json'):
            print("‚ùå Arquivo base_conhecimento_triagem.json n√£o encontrado")
            return False
        
        with open('base_conhecimento_triagem.json', 'r', encoding='utf-8') as f:
            base = json.load(f)
        
        # Verifica estrutura b√°sica
        required_keys = ['padroes_codigo', 'padroes_banco', 'padroes_sistema']
        for key in required_keys:
            if key not in base:
                print(f"‚ùå Chave '{key}' n√£o encontrada na base de conhecimento")
                return False
        
        # Conta padr√µes
        total_padroes = 0
        total_padroes += sum(len(categoria) for categoria in base['padroes_codigo'].values())
        total_padroes += len(base['padroes_banco'])
        total_padroes += len(base['padroes_sistema'])
        
        print(f"‚úÖ Base de conhecimento carregada: {total_padroes} padr√µes")
        print(f"   ‚Ä¢ Padr√µes de c√≥digo: {sum(len(cat) for cat in base['padroes_codigo'].values())}")
        print(f"   ‚Ä¢ Padr√µes de banco: {len(base['padroes_banco'])}")
        print(f"   ‚Ä¢ Padr√µes de sistema: {len(base['padroes_sistema'])}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro na base de conhecimento: {e}")
        return False

async def test_triagem_service():
    """Testa o servi√ßo de triagem"""
    print_step(3, "Testando Servi√ßo de Triagem")
    
    try:
        from triagem_service import TriagemService
        
        # Inicializa o servi√ßo
        service = TriagemService()
        print(f"‚úÖ Servi√ßo inicializado (Modo: {'MOCK' if service.mock_mode else 'IA'})")
        
        # Testa an√°lise com um chamado simples
        chamado_teste = """
        VERS√ÉO DO SISTEMA EM QUE O PROBLEMA OCORREU:
        R = 2024.1.0
        
        C√ìDIGO DA BASE QUE APRESENTA O PROBLEMA:
        R = Base do cliente Teste
        
        JUSTIFICATIVA DA URG√äNCIA:
        R = Erro ao salvar dados
        
        MENU/LOCAL DO SISTEMA EM QUE ACONTECE:
        R = Cadastros > Alunos
        
        BRIEFING:
        R = Erro de constraint violation ao tentar salvar novo aluno no BtnSalvar_Click
        
        EXEMPLOS (OBRIGAT√ìRIO):
        R = CPF: 123.456.789-00
        
        OBS:
        R = Ticket: #TESTE001
        """
        
        print("üîç Executando an√°lise de teste...")
        resultado = await service.analisar_chamado(chamado_teste, "CADASTROS")
        
        if resultado['sucesso']:
            print("‚úÖ An√°lise executada com sucesso")
            print(f"   ‚Ä¢ Padr√µes detectados: {len(resultado['padroes_encontrados'])}")
            print(f"   ‚Ä¢ Solu√ß√µes geradas: {len(resultado['solucoes_sugeridas'])}")
            
            # Mostra primeiro padr√£o encontrado
            if resultado['padroes_encontrados']:
                padrao = resultado['padroes_encontrados'][0]
                print(f"   ‚Ä¢ Primeiro padr√£o: {padrao['palavra_chave']} ({padrao['tipo']})")
            
            return True
        else:
            print("‚ùå Falha na an√°lise")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no servi√ßo de triagem: {e}")
        return False

async def test_api_endpoints():
    """Testa se os endpoints da API est√£o funcionando"""
    print_step(4, "Testando Endpoints da API")
    
    try:
        import httpx
        
        # Testa se o servidor est√° rodando
        try:
            async with httpx.AsyncClient(timeout=5.0) as client:
                response = await client.get("http://localhost:8001/health")
                
                if response.status_code == 200:
                    print("‚úÖ Servidor API est√° rodando")
                    health_data = response.json()
                    print(f"   ‚Ä¢ Status: {health_data.get('status', 'unknown')}")
                    print(f"   ‚Ä¢ Servi√ßos: {health_data.get('servicos', {})}")
                    return True
                else:
                    print(f"‚ö†Ô∏è  Servidor respondeu com status: {response.status_code}")
                    return False
                    
        except httpx.ConnectError:
            print("‚ö†Ô∏è  Servidor n√£o est√° rodando (isso √© normal se voc√™ n√£o iniciou)")
            print("   Para testar a API, execute: python main_triagem.py")
            return True  # N√£o √© um erro, s√≥ n√£o est√° rodando
            
    except ImportError:
        print("‚ö†Ô∏è  httpx n√£o instalado - pulando teste de API")
        return True
    except Exception as e:
        print(f"‚ùå Erro no teste de API: {e}")
        return False

def print_resumo(resultados):
    """Imprime resumo dos testes"""
    print("\nüìä RESUMO DOS TESTES")
    print("=" * 60)
    
    total_testes = len(resultados)
    testes_ok = sum(1 for r in resultados if r)
    
    print(f"‚úÖ Testes bem-sucedidos: {testes_ok}/{total_testes}")
    
    if testes_ok == total_testes:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("\nüöÄ Sistema pronto para uso!")
        print("\nüí° Pr√≥ximos passos:")
        print("   1. Execute: python main_triagem.py")
        print("   2. Acesse: http://localhost:8001/docs")
        print("   3. Teste: python exemplo_uso.py")
    else:
        print("‚ö†Ô∏è  Alguns testes falharam")
        print("\nüîß Verifique os erros acima e corrija antes de usar")
    
    print(f"\n‚è∞ Teste conclu√≠do em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")

async def main():
    """Fun√ß√£o principal do teste"""
    print_header()
    
    # Lista de testes
    testes = [
        ("Importa√ß√µes", test_imports),
        ("Base de Conhecimento", test_base_conhecimento),
        ("Servi√ßo de Triagem", test_triagem_service),
        ("Endpoints da API", test_api_endpoints)
    ]
    
    # Executa testes
    resultados = []
    for nome, teste_func in testes:
        try:
            resultado = await teste_func()
            resultados.append(resultado)
        except Exception as e:
            print(f"‚ùå Erro inesperado no teste '{nome}': {e}")
            resultados.append(False)
        
        print()  # Linha em branco entre testes
    
    # Imprime resumo
    print_resumo(resultados)
    
    # Retorna c√≥digo de sa√≠da
    return 0 if all(resultados) else 1

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Teste interrompido pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Erro inesperado: {e}")
        sys.exit(1)
